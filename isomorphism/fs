
const iso = require('subgraph-isomorphism')
var stringSimilarity = require('string-similarity');
const fs = require('fs')
var readline = require('readline')

var dataP = fs.readFileSync('matrixP.txt', 'utf8');
var dataQ = fs.readFileSync('matrixQ.txt', 'utf8');

var linesP = dataP.split("\n");
var linesQ = dataQ.split("\n");
vertices = []

var lengthP = parseInt(linesP[0])
var lengthQ = parseInt(linesQ[0])

var smaller = Math.min(lengthP, lengthQ) - 2
//(lengthP < lengthQ) ? smaller = 'P' : smaller = 'Q'
console.log(smaller)
function getMatrices(P, vertices, lines, length)
{
	var index = 2;
	for(var i = 2; i <= length; i++)
	{
		vertices.push(lines[i])
		index++;
	}

	/*for(var l = 0; l < length; l++)
	{
		P[l] = new Array(length);
	}

	for(var j = 0; j < length; j++)
	{
		for(var h = 0; h < length; h++)
		{
			P[j][h] = parseInt(lines[index])
			index++;
		}
	}*/
}

maxNum = 10

var P = []
var Q = []
verticesP = []
verticesQ = []
renamedVariables = {}
variablesP = []
variablesQ = []
variableUsersP = {}
variableUsersQ = {}
registersP = []
registersQ = []
registersToVarsP = {}
registersToVarsQ = {}

/*function doesContain(str, query)
{ // is query in str
	return new RegExp('\\b' + query + '\\b').test(str)
}*/

function replaceOccurances(str, find, replace)
{
	return str.replace(new RegExp(find, 'g'), replace);
}

function indexesOf(string, regex) 
{
	var match,
		indexes = [];

	regex = new RegExp(regex);

	while (match = regex.exec(string)) {
		if (!indexes[match[0]]) indexes[match[0]] = [];
		indexes[match[0]].push(match.index);
	}

	return indexes;
}

function extractVariable(str, registersToVars, variables) 
{
	let vars = []
	let indexes = indexesOf(str, /%/g)
	for(var i = 1; i < indexes['%'].length; i++)
	{
		let start = indexes['%'][i]
		for(var j = indexes['%'][i]; j < str.length; j++)
		{
			if(str[j] == ',' || str[j] == ' ' || j == str.length - 1)
			{
				var reg;
				j == str.length - 1 ? reg = str.substring(start) : reg = str.substring(start, j)
				if(variables.indexOf(reg) > - 1)
					vars.push(reg)
				else
					vars.push(registersToVars[reg])
				break;
			}
		}
	}
	//console.log(vars)
	return vars
}

function arraysEqual(arr1, arr2) 
{
	if(arr1.length !== arr2.length)
		return false;
	for(var i = arr1.length; i--;) 
	{
		if(arr1[i] !== arr2[i])
			return false;
	}

	return true;
}


function similarityCriteria(P, Q, p, q, verticesP, verticesQ)
{
	pNode = verticesP[p]
	qNode = verticesQ[q]
	var similarity = stringSimilarity.compareTwoStrings(pNode, qNode)
	if (similarity == 1)
	{
		mapped[pNode] = qNode
		return 1;
	}
	if( (pNode.indexOf('load') > -1 && qNode.indexOf('load') > -1) || (pNode.indexOf('alloca') > -1 && qNode.indexOf('alloca') > -1) )
	{
		if(pNode.indexOf('load') > -1)
		{
			qName = qNode.substring(qNode.lastIndexOf('%'), qNode.indexOf(',') )
			pName = pNode.substring(pNode.lastIndexOf('%'), pNode.indexOf(',') )
		}
		if(pNode.indexOf('alloca') > -1)
		{
			qName = qNode.substring(qNode.indexOf('%'), qNode.indexOf('=') )
			pName = pNode.substring(pNode.indexOf('%'), pNode.indexOf('=') )
		}
		console.log(pName)
		console.log(qName)
		if(!(pName in renamedVariables))		// p has been renamed to q in code 2
		{
			for(let k in renamedVariables) // p has not been renamed yet... but check if its referring to a already-renamed variable
			{
				if(renamedVariables[k] == qName)		// you're renaming to a wrong variable!
					return 0;
			}
			renamedVariables[pName] = qName;
			return 1;
		}
		else
		{
			if(renamedVariables[pName] == qName)
				return 1;
		}
	}
	return 0;
}

function identifyVariables(vertices, variables, registers, registersToVars)
{
	for(var i = 0; i < smaller; i++)
	{
		if(vertices[i].indexOf('alloca') > -1)	// this variable is going to get used
		{
			variables.push(vertices[i].substring(vertices[i].lastIndexOf('%'), vertices[i].indexOf('=') - 1 ))
			continue;
		}
		else if(vertices[i][2] == '%')
		{
			var temp = vertices[i].substring(vertices[i].indexOf('%'), vertices[i].indexOf('=') - 1 )
			var vars = extractVariable(vertices[i], registersToVars, variables)
			registersToVars[temp] = vars
			registers.push(temp)
		}
	}
}

function allVariableUsers(vertices, variables, registers, variableUsers, registersToVars)
{
	for(var i = 0; i < smaller; i++)
	{
		var pls = vertices[i].split(' ')
		if (vertices[i].indexOf('load') > -1 ) continue

		variables.forEach(val =>
		{
			if(pls.indexOf(val) > -1 || pls.indexOf(val+',') > -1 || pls.indexOf(','+val) > -1) // :'(((
			{
				var user = replaceOccurances(vertices[i], val, '')
				var user = replaceOccurances(user, ',', '')
				var user = replaceOccurances(user, ' ', '')
				val in variableUsers ? variableUsers[val].push(user) : variableUsers[val] = [user];
			}
		})
		registers.forEach(val =>
		{
			if(pls.indexOf(val) > -1 || pls.indexOf(val+',') > -1 || pls.indexOf(','+val) > -1) // :'(((
			{
				var user = replaceOccurances(vertices[i], val, '')
				var user = replaceOccurances(user, ',', '')
				var user = replaceOccurances(user, ' ', '')
				var variable = registersToVars[val]
				variable in variableUsers ? variableUsers[variable].push(user) : variableUsers[variable] = [user];
			}
		})
	}
}

function detectRenamedVariables(variableUsersP, variableUsersQ)
{
	for(key in variableUsersP)
	{
		for(key2 in variableUsersQ)
		{
			if( arraysEqual(variableUsersP[key].sort(), variableUsersQ[key2].sort()) )
			{
				renamedVariables[key] = key2
				//console.log(variableUsersP[key])
				//console.log(key + ' and ' + key2 + ' are equal!!!')
			}
		}
	}
}

// who is referring to this instruction?

getMatrices(P, verticesP, linesP, lengthP)
getMatrices(Q, verticesQ, linesQ, lengthQ)

identifyVariables(verticesP, variablesP, registersP, registersToVarsP)
identifyVariables(verticesQ, variablesQ, registersQ, registersToVarsQ)

allVariableUsers(verticesP, variablesP, registersP, variableUsersP, registersToVarsP)
allVariableUsers(verticesQ, variablesQ, registersQ, variableUsersQ, registersToVarsQ)
detectRenamedVariables(variableUsersP, variableUsersQ)
//console.log(variableUsersP['%tmp5'])
//console.log(variableUsersQ)
//console.log(registersToVarsP)
//console.log(registersToVarsQ)
//console.log(variablesP)
//console.log(variablesQ)
//console.log(registersQ)



//console.log(iso.getIsomorphicSubgraphs(Q, P, maxNum, similarityCriteria, verticesP, verticesQ))
//console.log(renamedVariables);